# Pharmacy Scheduling System - Simplified Docker Compose
# 
# CORE SERVICES (All Required):
#   frontend    - React development server with hot reload (port 3000)
#   backend     - Express + Socket.IO backend for SMS and realtime (port 3001)
#   db          - PostgreSQL database with pharmacy schema
#   n8n         - Workflow automation platform (port 5678)
#
# ARCHITECTURE:
#   - Backend handles SMS via Capcom6 API and realtime updates via Socket.IO
#   - Frontend connects directly to backend for SMS operations
#   - Backend connects directly to PostgreSQL for database operations
#   - No Supabase dependencies - pure Node.js + PostgreSQL stack
#
# Usage:
#   Start:              docker compose up -d
#   Stop:               docker compose down
#   Reset:              docker compose down -v --remove-orphans
#   Logs:               docker compose logs -f [service_name]
#   Health:             docker compose ps

name: pharmacy-scheduling

services:

  frontend:
    container_name: pharm-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      # Source code volumes for hot reload
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/tsconfig.app.json:/app/tsconfig.app.json
      - ./frontend/tsconfig.node.json:/app/tsconfig.node.json
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tailwind.config.ts:/app/tailwind.config.ts
      - ./frontend/postcss.config.js:/app/postcss.config.js
      - ./frontend/components.json:/app/components.json
      # Exclude node_modules to avoid conflicts
      - /app/node_modules
    environment:
      # Backend Configuration
      - VITE_BACKEND_URL=${VITE_BACKEND_URL}
      - VITE_SOCKET_URL=${VITE_SOCKET_URL}
      
      # App Configuration
      - VITE_APP_NAME=Pharmacy Scheduling System
      - VITE_APP_VERSION=1.0.0
      
      # AI Configuration
      - VITE_OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      
      # Development Configuration
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - NODE_ENV=development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      backend:
        condition: service_healthy

  # Backend Service - Express + Socket.IO for SMS and realtime
  backend:
    container_name: pharm-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      # Server Configuration
      - BACKEND_PORT=3001
      - NODE_ENV=production
      - FRONTEND_URL=${FRONTEND_URL}
      
      # Database Configuration
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=pharmacy
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
      # SMS Gateway Configuration
      - CAPCOM6_API_URL=${CAPCOM6_API_URL}
      - CAPCOM6_API_KEY=${CAPCOM6_API_KEY}
      - CAPCOM6_ACCOUNT_ID=${CAPCOM6_ACCOUNT_ID}
      - CAPCOM6_PHONE_NUMBER=${CAPCOM6_PHONE_NUMBER}
      - CAPCOM6_USERNAME=${CAPCOM6_USERNAME}
      - CAPCOM6_PASSWORD=${CAPCOM6_PASSWORD}
      
      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=${JWT_EXPIRY}
    volumes:
      # Database initialization scripts
      - ./backend/db/init:/app/db/init:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy

  # PostgreSQL Database - Pure PostgreSQL, no Supabase
  db:
    container_name: pharm-db
    image: postgres:15-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      # Database data persistence
      - postgres_data:/var/lib/postgresql/data
      # Initialization scripts
      - ./backend/db/init:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_DB: pharmacy
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d pharmacy"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["postgres", "-c", "log_statement=all", "-c", "log_min_messages=info"]

  # n8n workflow automation platform
  n8n:
    container_name: n8n
    image: n8nio/n8n:latest
    restart: unless-stopped
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Basic configuration
      N8N_HOST: "0.0.0.0"
      N8N_PORT: 5678
      N8N_PROTOCOL: "http"
      
      # Database configuration (use existing PostgreSQL)
      DB_TYPE: "postgresdb"
      DB_POSTGRESDB_HOST: "db"
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: "pharmacy"
      DB_POSTGRESDB_USER: "postgres"
      DB_POSTGRESDB_PASSWORD: "${POSTGRES_PASSWORD}"
      DB_POSTGRESDB_SCHEMA: "n8n"
      
      # Security
      N8N_ENCRYPTION_KEY: "${N8N_ENCRYPTION_KEY:-your-super-secret-n8n-encryption-key-min-32-chars}"
      
      # Authentication (enable basic auth for security)
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: "${N8N_BASIC_AUTH_USER:-admin}"
      N8N_BASIC_AUTH_PASSWORD: "${N8N_BASIC_AUTH_PASSWORD:-change-this-password}"
      
      # Webhooks and external access
      WEBHOOK_URL: "http://localhost:5678/"
      
      # Performance and functionality
      NODE_ENV: "production"
      GENERIC_TIMEZONE: "America/New_York"
      N8N_SECURE_COOKIE: "false"
      
      # Allow external modules and code execution
      NODE_FUNCTION_ALLOW_EXTERNAL: "*"
      
      # File permissions
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "false"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  n8n_data:
