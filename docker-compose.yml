# Pharmacy Scheduling System - Streamlined Docker Compose
# Usage
#   Start:              docker compose up -d
#   Stop:               docker compose down
#   Reset:              docker compose down -v --remove-orphans
#   Logs:               docker compose logs -f [service_name]

name: pharmacy-scheduling

services:

  frontend:
    container_name: pharm-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      # Source code volumes for hot reload
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/tsconfig.app.json:/app/tsconfig.app.json
      - ./frontend/tsconfig.node.json:/app/tsconfig.node.json
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tailwind.config.ts:/app/tailwind.config.ts
      - ./frontend/postcss.config.js:/app/postcss.config.js
      - ./frontend/components.json:/app/components.json
      # Exclude node_modules to avoid conflicts
      - /app/node_modules
    environment:
      # Core Supabase Configuration
      - VITE_SUPABASE_URL=http://localhost:8002
      - VITE_SUPABASE_ANON_KEY=${ANON_KEY}
      - VITE_SUPABASE_SERVICE_KEY=${SERVICE_ROLE_KEY}
      
      # App Configuration
      - VITE_APP_NAME=Pharmacy Scheduling System
      - VITE_APP_VERSION=1.0.0
      
      # SMS Gateway Configuration  
      - VITE_CAPCOM6_API_URL=http://100.126.232.47:8080/message
      - VITE_CAPCOM6_USERNAME=sms
      - VITE_CAPCOM6_PASSWORD=${CAPCOM6_PASSWORD}
      - VITE_WEBHOOK_BASE_URL=http://localhost:8002
      
      # AI Configuration
      - VITE_OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      
      # Development Configuration
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - NODE_ENV=development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      kong:
        condition: service_healthy

  # API Gateway - Simplified Kong configuration
  kong:
    container_name: supabase-kong
    image: kong:2.8.1
    restart: unless-stopped
    ports:
      - "8002:8000/tcp"
      - "8443:8443/tcp"
    volumes:
      - ./supabase/volumes/api/kong.yml:/home/kong/temp.yml:ro,z
    depends_on:
      - rest
      - auth
      - functions
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
      DASHBOARD_USERNAME: ${DASHBOARD_USERNAME}
      DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD}
    entrypoint: bash -c 'eval "echo \"$$(cat ~/temp.yml)\"" > ~/kong.yml && /docker-entrypoint.sh kong docker-start'

  # Authentication Service
  auth:
    container_name: supabase-auth
    image: supabase/gotrue:v2.177.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      timeout: 5s
      interval: 5s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL}

      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

      GOTRUE_SITE_URL: ${SITE_URL}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP}

      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${JWT_EXPIRY}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}

      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP}
      GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLED: ${ENABLE_ANONYMOUS_USERS}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM}

      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}
      GOTRUE_MAILER_URLPATHS_INVITE: ${MAILER_URLPATHS_INVITE}
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${MAILER_URLPATHS_CONFIRMATION}
      GOTRUE_MAILER_URLPATHS_RECOVERY: ${MAILER_URLPATHS_RECOVERY}
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${MAILER_URLPATHS_EMAIL_CHANGE}

      GOTRUE_EXTERNAL_PHONE_ENABLED: ${ENABLE_PHONE_SIGNUP}
      GOTRUE_SMS_AUTOCONFIRM: ${ENABLE_PHONE_AUTOCONFIRM}

  # REST API Service
  rest:
    container_name: supabase-rest
    image: postgrest/postgrest:v12.2.12
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://authenticator:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
      PGRST_APP_SETTINGS_JWT_SECRET: ${JWT_SECRET}
      PGRST_APP_SETTINGS_JWT_EXP: ${JWT_EXPIRY}
    command: ["postgrest"]

  # Edge Functions Service
  functions:
    container_name: supabase-edge-functions
    image: supabase/edge-runtime:v1.67.4
    restart: unless-stopped
    volumes:
      - ./supabase/volumes/functions:/home/deno/functions:Z
    depends_on:
      - db
    environment:
      JWT_SECRET: ${JWT_SECRET}
      SUPABASE_URL: http://kong:8000
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      SUPABASE_DB_URL: postgresql://postgres:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      # Capcom6 SMS Gateway Configuration
      CAPCOM6_URL: http://100.126.232.47:8080
      CAPCOM6_USERNAME: sms
      CAPCOM6_PASSWORD: ${CAPCOM6_PASSWORD}
      # OpenRouter AI Configuration
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      VERIFY_JWT: "${FUNCTIONS_VERIFY_JWT}"
    command: ["start", "--main-service", "/home/deno/functions/main"]

  # PostgreSQL Database
  db:
    container_name: supabase-db
    image: supabase/postgres:15.8.1.060
    restart: unless-stopped
    volumes:
      - ./supabase/volumes/db/realtime.sql:/docker-entrypoint-initdb.d/migrations/99-realtime.sql:Z
      - ./supabase/volumes/db/webhooks.sql:/docker-entrypoint-initdb.d/init-scripts/98-webhooks.sql:Z
      - ./supabase/volumes/db/roles.sql:/docker-entrypoint-initdb.d/init-scripts/99-roles.sql:Z
      - ./supabase/volumes/db/jwt.sql:/docker-entrypoint-initdb.d/init-scripts/99-jwt.sql:Z
      # Pharmacy application schema and data
      - ./supabase/volumes/db/init/001_pharmacy_schema.sql:/docker-entrypoint-initdb.d/migrations/01-pharmacy_schema.sql:Z
      - ./supabase/volumes/db/init/002_document_imports.sql:/docker-entrypoint-initdb.d/migrations/02-document_imports.sql:Z
      # PGDATA directory is persisted between restarts (commented out to fix corruption)
      # - ./volumes/db/data:/var/lib/postgresql/data:Z
      # Changes required for internal supabase data
      - ./supabase/volumes/db/_supabase.sql:/docker-entrypoint-initdb.d/migrations/97-_supabase.sql:Z
      - ./supabase/volumes/db/pooler.sql:/docker-entrypoint-initdb.d/migrations/98-pooler.sql:Z
      # Use named volume to persist pgsodium decryption key between restarts
      - db-config:/etc/postgresql-custom
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXP: ${JWT_EXPIRY}
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf", "-c", "log_min_messages=fatal"]

  # Connection Pooler
  supavisor:
    container_name: supabase-pooler
    image: supabase/supavisor:2.5.7
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
      - "${POOLER_PROXY_PORT_TRANSACTION}:6543"
    volumes:
      - ./supabase/volumes/pooler/pooler.exs:/etc/pooler/pooler.exs:ro,z
    healthcheck:
      test: ["CMD", "curl", "-sSfL", "--head", "-o", "/dev/null", "http://127.0.0.1:4000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
    environment:
      PORT: 4000
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_URL: ecto://supabase_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/_supabase
      CLUSTER_POSTGRES: true
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      VAULT_ENC_KEY: ${VAULT_ENC_KEY}
      API_JWT_SECRET: ${JWT_SECRET}
      METRICS_JWT_SECRET: ${JWT_SECRET}
      REGION: local
      ERL_AFLAGS: -proto_dist inet_tcp
      POOLER_TENANT_ID: ${POOLER_TENANT_ID}
      POOLER_DEFAULT_POOL_SIZE: ${POOLER_DEFAULT_POOL_SIZE}
      POOLER_MAX_CLIENT_CONN: ${POOLER_MAX_CLIENT_CONN}
      POOLER_POOL_MODE: transaction
      DB_POOL_SIZE: ${POOLER_DB_POOL_SIZE}
    command: ["/bin/sh", "-c", "/app/bin/migrate && /app/bin/supavisor eval \"$$(cat /etc/pooler/pooler.exs)\" && /app/bin/server"]

  # n8n workflow automation platform
  n8n:
    container_name: n8n
    image: n8nio/n8n:latest
    restart: unless-stopped
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Basic configuration
      N8N_HOST: "0.0.0.0"
      N8N_PORT: 5678
      N8N_PROTOCOL: "http"
      
      # Database configuration (use existing PostgreSQL)
      DB_TYPE: "postgresdb"
      DB_POSTGRESDB_HOST: "db"
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: "${POSTGRES_DB}"
      DB_POSTGRESDB_USER: "postgres"
      DB_POSTGRESDB_PASSWORD: "${POSTGRES_PASSWORD}"
      DB_POSTGRESDB_SCHEMA: "n8n"
      
      # Security
      N8N_ENCRYPTION_KEY: "${N8N_ENCRYPTION_KEY:-your-super-secret-n8n-encryption-key-min-32-chars}"
      
      # Authentication (enable basic auth for security)
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: "${N8N_BASIC_AUTH_USER:-admin}"
      N8N_BASIC_AUTH_PASSWORD: "${N8N_BASIC_AUTH_PASSWORD:-change-this-password}"
      
      # Webhooks and external access
      WEBHOOK_URL: "http://localhost:5678/"
      
      # Performance and functionality
      NODE_ENV: "production"
      GENERIC_TIMEZONE: "America/New_York"
      N8N_SECURE_COOKIE: "false"
      
      # Allow external modules and code execution
      NODE_FUNCTION_ALLOW_EXTERNAL: "*"
      
      # File permissions
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "false"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3


volumes:
  db-config:
  n8n_data:
